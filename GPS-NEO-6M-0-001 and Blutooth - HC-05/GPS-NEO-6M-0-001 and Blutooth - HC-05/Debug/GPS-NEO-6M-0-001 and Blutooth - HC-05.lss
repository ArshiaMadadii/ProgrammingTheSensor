
GPS-NEO-6M-0-001 and Blutooth - HC-05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000002b0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007e  008000a2  008000a2  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093f  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000631  00000000  00000000  00000d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f5  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000467  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f0  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000200b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 32       	cpi	r26, 0x20	; 32
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  8a:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z11serialbeginv>:

void serialprintln(char *str)
{
	serialprint(str); // Transmit string
	serialwrite(0x0d); // Transmit carriage return (CR)
	serialwrite(0x0a); // Transmit line feed (LF)
  92:	86 e8       	ldi	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
  96:	10 bc       	out	0x20, r1	; 32
  98:	83 e3       	ldi	r24, 0x33	; 51
  9a:	89 b9       	out	0x09, r24	; 9
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <__vector_13>:
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
  b4:	8c b1       	in	r24, 0x0c	; 12
  b6:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <ind>
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	e4 54       	subi	r30, 0x44	; 68
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 83       	st	Z, r24
  c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <ind>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <ind>
  cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <ind>
  d0:	87 30       	cpi	r24, 0x07	; 7
  d2:	78 f4       	brcc	.+30     	; 0xf2 <__vector_13+0x50>
  d4:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <ind>
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e5 54       	subi	r30, 0x45	; 69
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	90 81       	ld	r25, Z
  e0:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <ind>
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e1 5a       	subi	r30, 0xA1	; 161
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	98 13       	cpse	r25, r24
  ee:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <ind>
  f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <ind>
  f6:	82 33       	cpi	r24, 0x32	; 50
  f8:	18 f0       	brcs	.+6      	; 0x100 <__vector_13+0x5e>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <stringReceived>
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_Z11UART_Rxcharv>:
}

unsigned char UART_Rxchar()
{
	while ((UCSRA & (1 << RXC)) == 0);
 112:	5f 9b       	sbis	0x0b, 7	; 11
 114:	fe cf       	rjmp	.-4      	; 0x112 <_Z11UART_Rxcharv>
	return (UDR);
 116:	8c b1       	in	r24, 0x0c	; 12
}
 118:	08 95       	ret

0000011a <_Z11UART_Txcharc>:

void UART_Txchar(char ch)
{
	while ((UCSRA & (1 << UDRE)) == 0);
 11a:	5d 9b       	sbis	0x0b, 5	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <_Z11UART_Txcharc>
	UDR = ch;
 11e:	8c b9       	out	0x0c, r24	; 12
 120:	08 95       	ret

00000122 <_Z15UART_SendstringPc>:
}

void UART_Sendstring(char *str)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	fc 01       	movw	r30, r24
	unsigned char j = 0;

	while (str[j] != 0)
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	59 f0       	breq	.+22     	; 0x146 <_Z15UART_SendstringPc+0x24>
 130:	8f 01       	movw	r16, r30
 132:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_Txchar(str[j]);
 134:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11UART_Txcharc>
		j++;
 138:	cf 5f       	subi	r28, 0xFF	; 255

void UART_Sendstring(char *str)
{
	unsigned char j = 0;

	while (str[j] != 0)
 13a:	f8 01       	movw	r30, r16
 13c:	ec 0f       	add	r30, r28
 13e:	f1 1d       	adc	r31, r1
 140:	80 81       	ld	r24, Z
 142:	81 11       	cpse	r24, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <_Z15UART_SendstringPc+0x12>
	{
		UART_Txchar(str[j]);
		j++;
	}
}
 146:	cf 91       	pop	r28
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <_Z14processGPSDatav>:

void processGPSData()
{
	if (buf[0] == '$' && buf[1] == 'G' && buf[2] == 'P' && buf[3] == 'G' && buf[4] == 'G' && buf[5] == 'A')
 14e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <buf>
 152:	84 32       	cpi	r24, 0x24	; 36
 154:	09 f0       	breq	.+2      	; 0x158 <_Z14processGPSDatav+0xa>
 156:	6a c0       	rjmp	.+212    	; 0x22c <_Z14processGPSDatav+0xde>
 158:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <buf+0x1>
 15c:	87 34       	cpi	r24, 0x47	; 71
 15e:	09 f0       	breq	.+2      	; 0x162 <_Z14processGPSDatav+0x14>
 160:	65 c0       	rjmp	.+202    	; 0x22c <_Z14processGPSDatav+0xde>
 162:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <buf+0x2>
 166:	80 35       	cpi	r24, 0x50	; 80
 168:	09 f0       	breq	.+2      	; 0x16c <_Z14processGPSDatav+0x1e>
 16a:	60 c0       	rjmp	.+192    	; 0x22c <_Z14processGPSDatav+0xde>
 16c:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <buf+0x3>
 170:	87 34       	cpi	r24, 0x47	; 71
 172:	09 f0       	breq	.+2      	; 0x176 <_Z14processGPSDatav+0x28>
 174:	5b c0       	rjmp	.+182    	; 0x22c <_Z14processGPSDatav+0xde>
 176:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <buf+0x4>
 17a:	87 34       	cpi	r24, 0x47	; 71
 17c:	09 f0       	breq	.+2      	; 0x180 <_Z14processGPSDatav+0x32>
 17e:	56 c0       	rjmp	.+172    	; 0x22c <_Z14processGPSDatav+0xde>
 180:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <buf+0x5>
 184:	81 34       	cpi	r24, 0x41	; 65
 186:	09 f0       	breq	.+2      	; 0x18a <_Z14processGPSDatav+0x3c>
 188:	51 c0       	rjmp	.+162    	; 0x22c <_Z14processGPSDatav+0xde>
 18a:	ae ea       	ldi	r26, 0xAE	; 174
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 01       	movw	r18, r24
 194:	2f 5e       	subi	r18, 0xEF	; 239
 196:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		// Extract latitude
		int i, j = 0;
		for (i = 17; buf[i] != ',' && j < 11; i++)
 198:	f9 01       	movw	r30, r18
 19a:	e4 54       	subi	r30, 0x44	; 68
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	40 81       	ld	r20, Z
 1a0:	4c 32       	cpi	r20, 0x2C	; 44
 1a2:	c1 f0       	breq	.+48     	; 0x1d4 <_Z14processGPSDatav+0x86>
 1a4:	8b 30       	cpi	r24, 0x0B	; 11
 1a6:	91 05       	cpc	r25, r1
 1a8:	71 f4       	brne	.+28     	; 0x1c6 <_Z14processGPSDatav+0x78>
 1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <_Z14processGPSDatav+0x86>
 1ac:	9c 01       	movw	r18, r24
 1ae:	22 5e       	subi	r18, 0xE2	; 226
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		latitude[j] = '\0'; // Null-terminate the string

		// Extract longitude
		j = 0;
		for (i = 30; buf[i] != ',' && j < 11; i++)
 1b2:	d9 01       	movw	r26, r18
 1b4:	a4 54       	subi	r26, 0x44	; 68
 1b6:	bf 4f       	sbci	r27, 0xFF	; 255
 1b8:	4c 91       	ld	r20, X
 1ba:	4c 32       	cpi	r20, 0x2C	; 44
 1bc:	d9 f0       	breq	.+54     	; 0x1f4 <_Z14processGPSDatav+0xa6>
 1be:	8b 30       	cpi	r24, 0x0B	; 11
 1c0:	91 05       	cpc	r25, r1
 1c2:	89 f4       	brne	.+34     	; 0x1e6 <_Z14processGPSDatav+0x98>
 1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <_Z14processGPSDatav+0xa6>
	{
		// Extract latitude
		int i, j = 0;
		for (i = 17; buf[i] != ',' && j < 11; i++)
		{
			latitude[j++] = buf[i];
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	f9 01       	movw	r30, r18
 1ca:	e4 54       	subi	r30, 0x44	; 68
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	20 81       	ld	r18, Z
 1d0:	2d 93       	st	X+, r18
{
	if (buf[0] == '$' && buf[1] == 'G' && buf[2] == 'P' && buf[3] == 'G' && buf[4] == 'G' && buf[5] == 'A')
	{
		// Extract latitude
		int i, j = 0;
		for (i = 17; buf[i] != ',' && j < 11; i++)
 1d2:	df cf       	rjmp	.-66     	; 0x192 <_Z14processGPSDatav+0x44>
		{
			latitude[j++] = buf[i];
		}
		latitude[j] = '\0'; // Null-terminate the string
 1d4:	fc 01       	movw	r30, r24
 1d6:	e2 55       	subi	r30, 0x52	; 82
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	10 82       	st	Z, r1
 1dc:	e2 ea       	ldi	r30, 0xA2	; 162
 1de:	f0 e0       	ldi	r31, 0x00	; 0

		// Extract longitude
		j = 0;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	e3 cf       	rjmp	.-58     	; 0x1ac <_Z14processGPSDatav+0x5e>
		for (i = 30; buf[i] != ',' && j < 11; i++)
		{
			longitude[j++] = buf[i];
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	d9 01       	movw	r26, r18
 1ea:	a4 54       	subi	r26, 0x44	; 68
 1ec:	bf 4f       	sbci	r27, 0xFF	; 255
 1ee:	2c 91       	ld	r18, X
 1f0:	21 93       	st	Z+, r18
		}
		latitude[j] = '\0'; // Null-terminate the string

		// Extract longitude
		j = 0;
		for (i = 30; buf[i] != ',' && j < 11; i++)
 1f2:	dc cf       	rjmp	.-72     	; 0x1ac <_Z14processGPSDatav+0x5e>
		{
			longitude[j++] = buf[i];
		}
		longitude[j] = '\0'; // Null-terminate the string
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 55       	subi	r30, 0x5E	; 94
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	10 82       	st	Z, r1

		// Send the latitude and longitude over Bluetooth
		UART_Sendstring("Latitude: ");
 1fc:	86 e6       	ldi	r24, 0x66	; 102
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
		UART_Sendstring(latitude);
 204:	8e ea       	ldi	r24, 0xAE	; 174
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
		UART_Sendstring("\r\n");
 20c:	81 e7       	ldi	r24, 0x71	; 113
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>

		UART_Sendstring("Longitude: ");
 214:	84 e7       	ldi	r24, 0x74	; 116
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
		UART_Sendstring(longitude);
 21c:	82 ea       	ldi	r24, 0xA2	; 162
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
		UART_Sendstring("\r\n");
 224:	81 e7       	ldi	r24, 0x71	; 113
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
 22c:	08 95       	ret

0000022e <main>:
	}
}

int main(void)
{
	serialbegin(); // Initialize UART for GPS
 22e:	0e 94 49 00 	call	0x92	; 0x92 <_Z11serialbeginv>
	UCSRB |= (1 << RXEN) | (1 << TXEN); // Enable UART receiver and transmitter for Bluetooth
 232:	8a b1       	in	r24, 0x0a	; 10
 234:	88 61       	ori	r24, 0x18	; 24
 236:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Set data frame to 8-bit for Bluetooth
 238:	80 b5       	in	r24, 0x20	; 32
 23a:	86 68       	ori	r24, 0x86	; 134
 23c:	80 bd       	out	0x20, r24	; 32
	UBRRL = BAUD_PRESCALE;
 23e:	83 e3       	ldi	r24, 0x33	; 51
 240:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
 242:	10 bc       	out	0x20, r1	; 32

	sei(); // Enable global interrupts
 244:	78 94       	sei

	while (1)
	{
		if (stringReceived == 1)
 246:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <stringReceived>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	41 f4       	brne	.+16     	; 0x25e <main+0x30>
		{
			cli(); // Disable interrupts while processing data
 24e:	f8 94       	cli
			processGPSData(); // Extract and send GPS data
 250:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z14processGPSDatav>
			ind = 0; // Reset index
 254:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <ind>
			stringReceived = 0; // Reset flag
 258:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <stringReceived>
			sei(); // Re-enable interrupts
 25c:	78 94       	sei
		}

		// Bluetooth control (optional, depends on your specific needs)
		int read = UART_Rxchar();
 25e:	0e 94 89 00 	call	0x112	; 0x112 <_Z11UART_Rxcharv>
 262:	90 e0       	ldi	r25, 0x00	; 0
		if (read == '1')
 264:	81 33       	cpi	r24, 0x31	; 49
 266:	91 05       	cpc	r25, r1
 268:	31 f4       	brne	.+12     	; 0x276 <main+0x48>
		{
			PORTB |= (1 << PB0);
 26a:	c0 9a       	sbi	0x18, 0	; 24
			UART_Sendstring("LED ON");
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
 274:	e8 cf       	rjmp	.-48     	; 0x246 <main+0x18>
		}
		else if (read == '2')
 276:	82 33       	cpi	r24, 0x32	; 50
 278:	91 05       	cpc	r25, r1
 27a:	31 f4       	brne	.+12     	; 0x288 <main+0x5a>
		{
			PORTB &= ~(1 << PB0);
 27c:	c0 98       	cbi	0x18, 0	; 24
			UART_Sendstring("LED OFF");
 27e:	87 e8       	ldi	r24, 0x87	; 135
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
 286:	df cf       	rjmp	.-66     	; 0x246 <main+0x18>
		}
		else if (read == 'a')
 288:	81 36       	cpi	r24, 0x61	; 97
 28a:	91 05       	cpc	r25, r1
 28c:	31 f4       	brne	.+12     	; 0x29a <main+0x6c>
		{
			PORTB |= (1 << PB1);
 28e:	c1 9a       	sbi	0x18, 1	; 24
			UART_Sendstring("Relay On");
 290:	8f e8       	ldi	r24, 0x8F	; 143
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
 298:	d6 cf       	rjmp	.-84     	; 0x246 <main+0x18>
		}
		else if (read == 'b')
 29a:	82 36       	cpi	r24, 0x62	; 98
 29c:	91 05       	cpc	r25, r1
 29e:	99 f6       	brne	.-90     	; 0x246 <main+0x18>
		{
			PORTB &= ~(1 << PB1);
 2a0:	c1 98       	cbi	0x18, 1	; 24
			UART_Sendstring("Relay OFF");
 2a2:	88 e9       	ldi	r24, 0x98	; 152
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 91 00 	call	0x122	; 0x122 <_Z15UART_SendstringPc>
 2aa:	cd cf       	rjmp	.-102    	; 0x246 <main+0x18>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
