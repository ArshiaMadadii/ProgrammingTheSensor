
GPS-NEO-6M-0-001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000066  0080007a  0080007a  0000024e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000078c  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fe  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000276  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c9  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000189d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  8a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z11serialbeginv>:
char latitude[12]; //Stored latitude
char logitude[12]; //Stored longitude

void serialbegin()
{
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Select UCSRC and set data frame to 8-bit
  92:	86 e8       	ldi	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  96:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  98:	83 e3       	ldi	r24, 0x33	; 51
  9a:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE); // Enable UART receiver, transmitter and RX complete interrupt
  9c:	88 e9       	ldi	r24, 0x98	; 152
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	08 95       	ret

000000a2 <__vector_13>:
}

ISR(USART_RXC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	char ch = UDR; // Read received data from UART
  b4:	8c b1       	in	r24, 0x0c	; 12
	buf[ind] = ch; // Store received character in buffer
  b6:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <ind>
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	e4 58       	subi	r30, 0x84	; 132
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 83       	st	Z, r24
	ind++; // Increment index
  c2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ind>
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <ind>

	if (ind < 7)
  cc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ind>
  d0:	87 30       	cpi	r24, 0x07	; 7
  d2:	78 f4       	brcc	.+30     	; 0xf2 <__vector_13+0x50>
	{
		if (buf[ind - 1] != gpgga[ind - 1]) // Check for '$GPGGA' pattern
  d4:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <ind>
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e5 58       	subi	r30, 0x85	; 133
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	90 81       	ld	r25, Z
  e0:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <ind>
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e1 5a       	subi	r30, 0xA1	; 161
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 81       	ld	r24, Z
  ec:	98 13       	cpse	r25, r24
		ind = 0; // Reset index if pattern mismatched
  ee:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ind>
	}

	if (ind >= 50)
  f2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ind>
  f6:	82 33       	cpi	r24, 0x32	; 50
  f8:	18 f0       	brcs	.+6      	; 0x100 <__vector_13+0x5e>
	stringReceived = 1; // Set flag when buffer reaches a certain size
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_Z11serialwritec>:


void serialwrite(char ch)
{
	while ((UCSRA & (1 << UDRE)) == 0); // Wait for empty transmit buffer
 112:	5d 9b       	sbis	0x0b, 5	; 11
 114:	fe cf       	rjmp	.-4      	; 0x112 <_Z11serialwritec>
	UDR = ch; // Transmit data
 116:	8c b9       	out	0x0c, r24	; 12
 118:	08 95       	ret

0000011a <_Z11serialprintPc>:
}

void serialprint(char *str)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while (*str)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <_Z11serialprintPc+0x18>
 126:	21 96       	adiw	r28, 0x01	; 1
	{
		serialwrite(*str++); // Transmit string character by character
 128:	0e 94 89 00 	call	0x112	; 0x112 <_Z11serialwritec>
	UDR = ch; // Transmit data
}

void serialprint(char *str)
{
	while (*str)
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <_Z11serialprintPc+0xe>
	{
		serialwrite(*str++); // Transmit string character by character
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_Z13serialprintlnPc>:

void serialprintln(char *str)
{
	serialprint(str); // Transmit string
 138:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11serialprintPc>
	serialwrite(0x0d); // Transmit carriage return (CR)
 13c:	8d e0       	ldi	r24, 0x0D	; 13
 13e:	0e 94 89 00 	call	0x112	; 0x112 <_Z11serialwritec>
	serialwrite(0x0a); // Transmit line feed (LF)
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 89 00 	call	0x112	; 0x112 <_Z11serialwritec>
 148:	08 95       	ret

0000014a <main>:
}


int main()
{
	serialbegin(); // Initialize UART
 14a:	0e 94 49 00 	call	0x92	; 0x92 <_Z11serialbeginv>
	sei(); // Enable global interrupts
 14e:	78 94       	sei

	while (1)
	{
		if (stringReceived == 1)
 150:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x6>
		{
			cli(); // Disable interrupts while processing data
 158:	f8 94       	cli
			serialprint("Received String:");
 15a:	86 e6       	ldi	r24, 0x66	; 102
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11serialprintPc>
			for (int i = 0; i < ind; i++)
 162:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ind>
 166:	88 23       	and	r24, r24
 168:	79 f0       	breq	.+30     	; 0x188 <main+0x3e>
 16a:	c0 e0       	ldi	r28, 0x00	; 0
 16c:	d0 e0       	ldi	r29, 0x00	; 0
			serialwrite(buf[i]); // Transmit received data
 16e:	fe 01       	movw	r30, r28
 170:	e4 58       	subi	r30, 0x84	; 132
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	80 81       	ld	r24, Z
 176:	0e 94 89 00 	call	0x112	; 0x112 <_Z11serialwritec>
	{
		if (stringReceived == 1)
		{
			cli(); // Disable interrupts while processing data
			serialprint("Received String:");
			for (int i = 0; i < ind; i++)
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ind>
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	c8 17       	cp	r28, r24
 184:	d9 07       	cpc	r29, r25
 186:	9c f3       	brlt	.-26     	; 0x16e <main+0x24>
			serialwrite(buf[i]); // Transmit received data
			ind = 0; // Reset index
 188:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ind>
			stringReceived = 0; // Reset flag
 18c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
			serialprintln(" "); // Transmit new line
 190:	87 e7       	ldi	r24, 0x77	; 119
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 9c 00 	call	0x138	; 0x138 <_Z13serialprintlnPc>
			sei(); // Re-enable interrupts
 198:	78 94       	sei
 19a:	da cf       	rjmp	.-76     	; 0x150 <main+0x6>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
